<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>燃情岁月</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.marcoder.com/"/>
  <updated>2017-03-07T03:38:19.000Z</updated>
  <id>http://www.marcoder.com/</id>
  
  <author>
    <name>Marco Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基本Spring Boot 的 Spring Security CAS SSO 配置</title>
    <link href="http://www.marcoder.com/2017/02/18/spring-boot-security-cas-sso/"/>
    <id>http://www.marcoder.com/2017/02/18/spring-boot-security-cas-sso/</id>
    <published>2017-02-18T04:21:42.000Z</published>
    <updated>2017-03-07T03:38:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>【原创文章，转载请注明出处】</strong></p>
<p>最近在整理公司的几个内部系统的认证和授权，这些子系统是用php开发的，单点登陆和权限管理都做了，但是架构和设计上有一些局限，导致本博用Java开发的新的子系统无法接入。随着公司技术方向往Java微服务架构转移，之前老的那一套php搞的认证与授权也决定推倒从来，用Java的这一套来搞。</p>
<p>今天主要主要聊一下单点登陆系统的整合，单点登陆这种比较成熟的技术，有很多开源产品可以使用。而本博的原则也是能用开源产品就尽量不要自己重头写，原因很简单：</p>
<ul>
<li>开源产品在需求上考虑的比你要周全</li>
<li>公司自己不需要去维护一套代码，可以减少成本</li>
</ul>
<a id="more"></a>
<p>单点登录开源产品网上有很多，综合评估下来肯定使用<code>CAS</code>，因为他历史悠久、功能强大、坚持迭代更新中。本文不详情介绍如何搭建<code>CAS</code>单点登录服务了，因为网上已经有很多相关的博文了，本博在搭建<code>CAS</code>时大多参照了<code>Endzz</code>的<a href="http://www.jianshu.com/p/daca18a8f84c" target="_blank" rel="external">这篇博文</a>。</p>
<p>现在是<code>Spring Boot</code>的时代，本博在工作中开发的Web应该也都是基于<code>Spring Boot</code>构建的，因为她实在是太快捷太方便了！Web的授权访问控制使用<code>Spring Security</code>Spring家族的一员猛将，本篇博文主要聊一下如何基于<code>Spring Boot</code>把<code>Spring Security</code>与<code>CAS</code>单点登录整合起来，接下来进入正题。</p>
<p>首先给项目添加<code>Spring Security</code>依赖配置(本博使用<code>Gradle</code>构建):<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">	<span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</div><div class="line">	<span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-security'</span>)</div><div class="line">	<span class="keyword">compile</span>(<span class="string">'org.springframework.security:spring-security-cas'</span>)</div><div class="line">	testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中spring-security-cas这个依赖很关键，她内部已经实现了整合逻辑，而我们要做的仅仅是配置。</p>
<p>然后添加Security配置文件<code>WebSecurityConfig.java</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Spring Security configs.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> marco</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableWebSecurity</span></div><div class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(jsr250Enabled = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// CAS单点登录服务地址</span></div><div class="line">    <span class="keyword">private</span> String SSO_URL = <span class="string">"http://sso.xxx.com"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Spring Security 基本配置</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> httpSecurity</div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        httpSecurity.exceptionHandling().accessDeniedPage(<span class="string">"/error/403"</span>) <span class="comment">// 无权访问时转向页面</span></div><div class="line">                .authenticationEntryPoint(getCasAuthenticationEntryPoint())</div><div class="line">                .and().addFilter(casAuthenticationFilter())</div><div class="line">                .addFilterBefore(singleSignOutFilter(), CasAuthenticationFilter.class)</div><div class="line">                .addFilterBefore(logoutFilter(), LogoutFilter.class)</div><div class="line">                .authorizeRequests()</div><div class="line">                .antMatchers(<span class="string">"/js/**"</span>, <span class="string">"/css/**"</span>, <span class="string">"/imgs/**"</span>).permitAll()</div><div class="line">                .anyRequest().authenticated()</div><div class="line">                .and()</div><div class="line">                .formLogin().loginPage(<span class="string">"/login"</span>).permitAll()</div><div class="line">                .and().logout().permitAll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 配置CAS登录页面</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> CasAuthenticationEntryPoint <span class="title">getCasAuthenticationEntryPoint</span><span class="params">()</span> </span>&#123;</div><div class="line">        CasAuthenticationEntryPoint point = <span class="keyword">new</span> CasAuthenticationEntryPoint();</div><div class="line">        point.setLoginUrl(SSO_URL + <span class="string">"login"</span>);</div><div class="line">        point.setServiceProperties(serviceProperties());</div><div class="line">        <span class="keyword">return</span> point;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 认证过滤器</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> CasAuthenticationFilter <span class="title">casAuthenticationFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        CasAuthenticationFilter filter = <span class="keyword">new</span> CasAuthenticationFilter();</div><div class="line">        filter.setAuthenticationManager(authenticationManager());</div><div class="line">        <span class="keyword">return</span> filter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SingleSignOutFilter <span class="title">singleSignOutFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        SingleSignOutFilter filter = <span class="keyword">new</span> SingleSignOutFilter();</div><div class="line">        filter.setCasServerUrlPrefix(SSO_URL);</div><div class="line">        filter.setIgnoreInitConfiguration(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> filter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> LogoutFilter <span class="title">logoutFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        LogoutFilter filter = <span class="keyword">new</span> LogoutFilter(SSO_URL + <span class="string">"logout"</span>, <span class="keyword">new</span> SecurityContextLogoutHandler());</div><div class="line">        <span class="keyword">return</span> filter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> CasAuthenticationProvider <span class="title">casAuthenticationProvider</span><span class="params">()</span> </span>&#123;</div><div class="line">        CasAuthenticationProvider provider = <span class="keyword">new</span> CasAuthenticationProvider();</div><div class="line">        provider.setTicketValidator(cas30ServiceTicketValidator());</div><div class="line">        provider.setServiceProperties(serviceProperties());</div><div class="line">        provider.setKey(<span class="string">"an_id_for_this_auth_provider_only"</span>);</div><div class="line">        provider.setAuthenticationUserDetailsService(userDetailsByNameServiceWrapper());</div><div class="line">        <span class="keyword">return</span> provider;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> ServiceProperties <span class="title">serviceProperties</span><span class="params">()</span> </span>&#123;</div><div class="line">        ServiceProperties properties = <span class="keyword">new</span> ServiceProperties();</div><div class="line">        properties.setService(<span class="string">"http://localhost:8080/login/cas"</span>);</div><div class="line">        properties.setSendRenew(<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> properties;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当CAS认证成功时, Spring Security会自动调用此类对用户进行授权</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> UserDetailsByNameServiceWrapper <span class="title">userDetailsByNameServiceWrapper</span><span class="params">()</span> </span>&#123;</div><div class="line">        UserDetailsByNameServiceWrapper wrapper = <span class="keyword">new</span> UserDetailsByNameServiceWrapper();</div><div class="line">        wrapper.setUserDetailsService(userDetailsService);</div><div class="line">        <span class="keyword">return</span> wrapper;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Cas20ServiceTicketValidator <span class="title">cas30ServiceTicketValidator</span><span class="params">()</span> </span>&#123;</div><div class="line">        Cas20ServiceTicketValidator validator = <span class="keyword">new</span> Cas20ServiceTicketValidator(SSO_URL);</div><div class="line">        <span class="keyword">return</span> validator;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>UserDetailsService</code>是定义获取用户权限信息的接口，以下是<code>UserDetailsService</code>的实现类，这里应该去查询数据库或者调用授权API获取用户权限，本博这里简单做一下示例代码实现：</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Service(<span class="string">"userDetailsService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">UserDetailsService</span></span> </span>&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> UserDetails loadUserByUsername(<span class="keyword">String</span> username) throws UsernameNotFoundException &#123;</div><div class="line">        List&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</div><div class="line">        GrantedAuthority admin = <span class="keyword">new</span> <span class="type">SimpleGrantedAuthority</span>(<span class="string">"ROLE_ADMIN"</span>);</div><div class="line">        authorities.add(admin);</div><div class="line"></div><div class="line">        User marco = <span class="keyword">new</span> <span class="type">User</span>(<span class="string">"Marco"</span>, <span class="string">"111111"</span>, authorities);</div><div class="line">        <span class="keyword">return</span> marco;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此<code>Spring Security CAS</code>已经配置完了，后续的HTML或者Controller中使用<code>Spring Security</code>标签或者<code>JSR250</code>标签即可对页面、restful API进去权限控制。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@RolesAllowed</span>(<span class="string">"ROLE_ADMIN"</span>)</div><div class="line"><span class="variable">@Controller</span></div><div class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line">public class UserController &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本篇博文代码地址：<a href="https://github.com/MTequila/demos/tree/master/spring-security-sso" target="_blank" rel="external">https://github.com/MTequila/demos/tree/master/spring-security-sso</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;【原创文章，转载请注明出处】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近在整理公司的几个内部系统的认证和授权，这些子系统是用php开发的，单点登陆和权限管理都做了，但是架构和设计上有一些局限，导致本博用Java开发的新的子系统无法接入。随着公司技术方向往Java微服务架构转移，之前老的那一套php搞的认证与授权也决定推倒从来，用Java的这一套来搞。&lt;/p&gt;
&lt;p&gt;今天主要主要聊一下单点登陆系统的整合，单点登陆这种比较成熟的技术，有很多开源产品可以使用。而本博的原则也是能用开源产品就尽量不要自己重头写，原因很简单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开源产品在需求上考虑的比你要周全&lt;/li&gt;
&lt;li&gt;公司自己不需要去维护一套代码，可以减少成本&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://www.marcoder.com/categories/Spring-Boot/"/>
    
    
      <category term="Spring" scheme="http://www.marcoder.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://www.marcoder.com/tags/Spring-Boot/"/>
    
      <category term="Spring Security" scheme="http://www.marcoder.com/tags/Spring-Security/"/>
    
      <category term="CAS" scheme="http://www.marcoder.com/tags/CAS/"/>
    
      <category term="SSO" scheme="http://www.marcoder.com/tags/SSO/"/>
    
  </entry>
  
</feed>
