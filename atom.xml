<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>燃情岁月</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2017-12-11T16:25:09.574Z</updated>
  <id>/</id>
  
  <author>
    <name>Marco Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用RSA非对称加密JWT</title>
    <link href="/2017/12/11/jwt-rsa/"/>
    <id>/2017/12/11/jwt-rsa/</id>
    <published>2017-12-11T15:01:51.000Z</published>
    <updated>2017-12-11T16:25:09.574Z</updated>
    
    <content type="html"><![CDATA[<p><strong>【原创文章，转载请注明出处】</strong></p>
<blockquote>
<p><a href="https://jwt.io" target="_blank" rel="external">JWT</a>几乎是当前分布式开发中无状态token的最佳选择，被越来越多的开发者接受和使用，<code>JWT</code>是基于加密算法的认证方式，省去了到认证服务器的校验过程，认证效率大大提高。更详细的关于JWT的介绍可以点击<a href="http://www.jianshu.com/p/576dbf44b2ae" target="_blank" rel="external">这里</a>查看。</p>
</blockquote>
<p>通常大家在使用JWT的时候都是使用<code>HmacSHA256</code>加密钥的加密方式，这种方式严格依赖密钥，在分布式开发的过程中，通常是由认证服务器生成<code>JWT</code>，然后再由资源校验<code>JWT</code>的有效性，那么这时候资源服务器就也需要密钥了，认证服务和资源服务很可能是不同的团队开发和维护，密钥在这个过程中传递，很有可能泄漏。密钥一旦泄漏，对方就可以轻易的模拟一个<code>JWT</code>token出来，获取相关信息。</p>
<p><a href="https://zh.wikipedia.org/wiki/RSA加密演算法" target="_blank" rel="external">RSA</a>非对称加密算法就可以很好的解决这个问题，认证服务器使用私钥生成<code>JWT</code>，资源服务器使用公钥去校验<code>JWT</code>，认证服务去管理私钥，公钥开放给各个资源服务，这样密钥泄漏的可能性就大大降低了。</p>
<a id="more"></a>
<h2 id="首先生成公钥和密钥"><a href="#首先生成公钥和密钥" class="headerlink" title="首先生成公钥和密钥"></a>首先生成公钥和密钥</h2><ol>
<li><p>打开终端<code>Terminal</code>或者<code>iTerm</code>输入以下命令生成私钥:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl genrsa -out rsa_private_key.pem 1024</div></pre></td></tr></table></figure>
</li>
<li><p>把RSA私钥转换成PKCS8格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM -nocrypt</div></pre></td></tr></table></figure>
<p>注意把控制台输出的私钥内容替换到私钥文件(<code>rsa_private_key.pem</code>)中去。</p>
</li>
<li><p>生成公钥</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl rsa -in rsa_private_key.pem -out rsa_public_key.pem -pubout</div></pre></td></tr></table></figure>
</li>
</ol>
<p>我这里生成了一份公钥和私钥，用于测试:<br>私钥<code>rsa_private_key.pem</code>:<br><figure class="highlight plain"><figcaption><span>rsa_private_key.pem</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">-----BEGIN PRIVATE KEY-----</div><div class="line">MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBANDrROfXcbDeMB40</div><div class="line">Aa+X/JkRquSj2hXfeMAbkiArzobMEkqwDbdG76/YtSRx6Nem79yqwhUNqNg+lKfM</div><div class="line">RMprERDm/+/eX1Tv3YDFzpXZay0md5hZxUQKNqWDobCd7U8twKRDfIw1BfIBtPid</div><div class="line">L3RKmOXlJudoa+KeThIRQlT2DHrFAgMBAAECgYBs1OKEU7sqA9TVJwppyqcPpiB8</div><div class="line">Es8c7dkdWj94+tkPZ2dv+N5sR0u9MwrJ/XzqOlBhh6KrDP6UB6Ww87wyJiwwy+11</div><div class="line">R6Oz2XxPSGBFimoZPyc+dgPC/z63PPpHStXN9027IcaS47sjvtUp6HoCjLZZNht/</div><div class="line">oSGxSLZjLDXPm3JLgQJBAP2MAgP387fF8wa5WHqafaNGKW5KI9srwY7szCbleO0Q</div><div class="line">EL5eLmYVGUns5sjRFJSjl242QWvkmNlp52TgIkfj+M0CQQDS8LnGa5zeWSzUiDkP</div><div class="line">oiMhaJSVQtlgApfsTAA7Lx+M0TENjJcFGFKhGWDSY8AIE1DzYWIijRbC0vsc+WZZ</div><div class="line">zOnZAkEA1dt3/7zudv2iJPPEq3UPr94IKByk7cKUemdFMzGus9YvKULrQ/Nb5zzI</div><div class="line">1G12PIFXwwBEYirouclYAYADqjuhqQJAHfgDfNRHKjPjMaLU8IqpkRKJoZcoyQI1</div><div class="line">UWYO1lnAksIZxQIHZrro6mhvoBR58OvFoX5hceU3qaBN+vTX/MQnKQJBAKX95ga2</div><div class="line">NNWQ5Y1TfMEN3X0Ki+y9H64HODxaIuHW/h0W7kVssHSdNPvlEzR+S5pBaVy/6nDH</div><div class="line">CUXtz5Uuq3Wm3CA=</div><div class="line">-----END PRIVATE KEY----</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>公钥<code>rsa_public_key.pem</code>:<br><figure class="highlight plain"><figcaption><span>rsa_public_key.pem</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-----BEGIN PUBLIC KEY-----</div><div class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDQ60Tn13Gw3jAeNAGvl/yZEark</div><div class="line">o9oV33jAG5IgK86GzBJKsA23Ru+v2LUkcejXpu/cqsIVDajYPpSnzETKaxEQ5v/v</div><div class="line">3l9U792Axc6V2WstJneYWcVECjalg6Gwne1PLcCkQ3yMNQXyAbT4nS90Spjl5Sbn</div><div class="line">aGvink4SEUJU9gx6xQIDAQAB</div><div class="line">-----END PUBLIC KEY-----</div><div class="line"></div></pre></td></tr></table></figure></p>
<h2 id="然后开始生成JWT"><a href="#然后开始生成JWT" class="headerlink" title="然后开始生成JWT"></a>然后开始生成JWT</h2><p>Java开发中一般使用<a href="http://mvnrepository.com/artifact/io.jsonwebtoken/jjwt" target="_blank" rel="external">jjwt</a>这个库来操作<code>JWT</code>,在<code>build.gradle</code>用添加如下依赖即可:<br><figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">	compile <span class="string">group:</span> <span class="string">'io.jsonwebtoken'</span>, <span class="string">name:</span> <span class="string">'jjwt'</span>, <span class="string">version:</span> <span class="string">'0.9.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><p>生成<code>JWT</code>的时候需要把签名算法改在<code>RS256</code>，这一点很重要，这里就表明要求<code>JWT</code>使用<code>RSA</code>算法进行加密:<br><figure class="highlight java"><figcaption><span>JwtUtils.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">buildJwtRS256</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.RS256;</div><div class="line">    </div><div class="line"><span class="comment">// 读取私钥</span></div><div class="line">String key = readResourceKey(<span class="string">"rsa_private_key.pem"</span>);</div><div class="line">    </div><div class="line"><span class="comment">// 生成签名密钥</span></div><div class="line"><span class="keyword">byte</span>[] keyBytes = (<span class="keyword">new</span> BASE64Decoder()).decodeBuffer(key);</div><div class="line">PKCS8EncodedKeySpec keySpec = <span class="keyword">new</span> PKCS8EncodedKeySpec(keyBytes);</div><div class="line">KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</div><div class="line">PrivateKey privateKey = keyFactory.generatePrivate(keySpec);</div><div class="line">JwtBuilder builder = Jwts.builder().setHeaderParam(<span class="string">"typ"</span>, <span class="string">"JWT"</span>)</div><div class="line">       .setIssuer(<span class="string">"marco"</span>)</div><div class="line">       .setSubject(<span class="string">"token"</span>)</div><div class="line">       .signWith(signatureAlgorithm, privateKey);</div><div class="line"></div><div class="line"><span class="comment">// jwt中需要传递的内容</span></div><div class="line">builder.claim(<span class="string">"id"</span>, <span class="number">10001</span>);</div><div class="line"><span class="keyword">return</span> builder.compact();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>生成的<code>JWT</code>字符串如下:</p>
<pre><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJtYXJjbyIsInN1YiI6InRva2VuIiwiaWQiOjEwMDAxfQ.KmPbzze6zGq5dXDt_XBmwGDsRljHC1dDda5vDroBaJCMdojKczyCUuBYQ203WY7WvgofFnmDw8t2APncDthdEbOxZ2lLXZeiadY6DnSVzOierTzehXGLq7jjONif5I_1vnyrkL5D6EQ2c7RrQNQZmkYGu_pSTkifC9bHJrlKMTs
</code></pre><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>使用<code>RSA</code>公钥解析<code>JWT</code>代码如下:<br><figure class="highlight java"><figcaption><span>JwtUtils.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title">parseJwtRS256</span><span class="params">(String jwt)</span> </span>&#123;</div><div class="line">Claims claims = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">   <span class="comment">// 读取公钥</span></div><div class="line">   String key = readResourceKey(<span class="string">"rsa_public_key.pem"</span>);</div><div class="line"></div><div class="line">   <span class="comment">// 生成签名公钥</span></div><div class="line">   <span class="keyword">byte</span>[] keyBytes = (<span class="keyword">new</span> BASE64Decoder()).decodeBuffer(key);</div><div class="line">   X509EncodedKeySpec keySpec = <span class="keyword">new</span> X509EncodedKeySpec(keyBytes);</div><div class="line">   KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</div><div class="line">   PublicKey publicKey = keyFactory.generatePublic(keySpec);</div><div class="line"></div><div class="line"></div><div class="line">   claims = Jwts.parser()</div><div class="line">           .setSigningKey(publicKey)</div><div class="line">           .parseClaimsJws(jwt).getBody();</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">   e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> claims;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>本篇博文代码地址：<a href="https://github.com/MTequila/demos/tree/master/jwt-rsa" target="_blank" rel="external">https://github.com/MTequila/demos/tree/master/jwt-rsa</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;【原创文章，转载请注明出处】&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://jwt.io&quot;&gt;JWT&lt;/a&gt;几乎是当前分布式开发中无状态token的最佳选择，被越来越多的开发者接受和使用，&lt;code&gt;JWT&lt;/code&gt;是基于加密算法的认证方式，省去了到认证服务器的校验过程，认证效率大大提高。更详细的关于JWT的介绍可以点击&lt;a href=&quot;http://www.jianshu.com/p/576dbf44b2ae&quot;&gt;这里&lt;/a&gt;查看。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通常大家在使用JWT的时候都是使用&lt;code&gt;HmacSHA256&lt;/code&gt;加密钥的加密方式，这种方式严格依赖密钥，在分布式开发的过程中，通常是由认证服务器生成&lt;code&gt;JWT&lt;/code&gt;，然后再由资源校验&lt;code&gt;JWT&lt;/code&gt;的有效性，那么这时候资源服务器就也需要密钥了，认证服务和资源服务很可能是不同的团队开发和维护，密钥在这个过程中传递，很有可能泄漏。密钥一旦泄漏，对方就可以轻易的模拟一个&lt;code&gt;JWT&lt;/code&gt;token出来，获取相关信息。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/RSA加密演算法&quot;&gt;RSA&lt;/a&gt;非对称加密算法就可以很好的解决这个问题，认证服务器使用私钥生成&lt;code&gt;JWT&lt;/code&gt;，资源服务器使用公钥去校验&lt;code&gt;JWT&lt;/code&gt;，认证服务去管理私钥，公钥开放给各个资源服务，这样密钥泄漏的可能性就大大降低了。&lt;/p&gt;
    
    </summary>
    
      <category term="Security" scheme="/categories/Security/"/>
    
    
      <category term="JWT" scheme="/tags/JWT/"/>
    
      <category term="RSA" scheme="/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security CAS Logout 重定向</title>
    <link href="/2017/03/08/spring-security-cas-logout-redirect/"/>
    <id>/2017/03/08/spring-security-cas-logout-redirect/</id>
    <published>2017-03-08T15:26:27.000Z</published>
    <updated>2017-03-08T16:14:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>【原创文章，转载请注明出处】</strong></p>
<blockquote>
<p>承接上文<a href="/2017/02/18/spring-boot-security-cas-sso/">《基本Spring Boot 的 Spring Security CAS SSO 配置》</a>；在使用<code>CAS</code>时，用户退出系统后，Web界面一直停留在<code>CAS</code>的退出成功界面上，没有继续转向，添加了转向参数也没有起到作用，网上找了一些资料后得到解决，这里记录分享一下。</p>
</blockquote>
<p>首先修改<code>CAS</code>配置文件：<code>cas-server-webapp</code>项目下的<code>webapp/WEB-INFO/cas-servlet.xml</code>，把<code>cas.logout.followServiceRedirects</code>参数设置为<code>true</code>：<a id="more"></a><br><figure class="highlight xml"><figcaption><span>cas-servlet.xml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logoutAction"</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.web.flow.LogoutAction"</span></span></div><div class="line">   <span class="attr">p:servicesManager-ref</span>=<span class="string">"servicesManager"</span></div><div class="line">   <span class="attr">p:followServiceRedirects</span>=<span class="string">"$&#123;cas.logout.followServiceRedirects:true&#125;"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>然后修改<code>Spring Security</code>配置文件中的logout链接，添加转向地址，这样在用户退出系统后，<code>CAS</code>即可转向到参数<code>service</code>所传递的链接地址中去。</p>
<p>代码如下：<br><figure class="highlight java"><figcaption><span>WebSecurityConfig.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> LogoutFilter <span class="title">logoutFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">   LogoutFilter filter = <span class="keyword">new</span> LogoutFilter(SSO_URL + <span class="string">"logout?service=http://localhost:8080/"</span>, <span class="keyword">new</span> SecurityContextLogoutHandler());</div><div class="line">   <span class="keyword">return</span> filter;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;【原创文章，转载请注明出处】&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;承接上文&lt;a href=&quot;/2017/02/18/spring-boot-security-cas-sso/&quot;&gt;《基本Spring Boot 的 Spring Security CAS SSO 配置》&lt;/a&gt;；在使用&lt;code&gt;CAS&lt;/code&gt;时，用户退出系统后，Web界面一直停留在&lt;code&gt;CAS&lt;/code&gt;的退出成功界面上，没有继续转向，添加了转向参数也没有起到作用，网上找了一些资料后得到解决，这里记录分享一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先修改&lt;code&gt;CAS&lt;/code&gt;配置文件：&lt;code&gt;cas-server-webapp&lt;/code&gt;项目下的&lt;code&gt;webapp/WEB-INFO/cas-servlet.xml&lt;/code&gt;，把&lt;code&gt;cas.logout.followServiceRedirects&lt;/code&gt;参数设置为&lt;code&gt;true&lt;/code&gt;：
    
    </summary>
    
      <category term="Spring Boot" scheme="/categories/Spring-Boot/"/>
    
    
      <category term="Spring" scheme="/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="/tags/Spring-Boot/"/>
    
      <category term="Spring Security" scheme="/tags/Spring-Security/"/>
    
      <category term="CAS" scheme="/tags/CAS/"/>
    
      <category term="Redirect" scheme="/tags/Redirect/"/>
    
  </entry>
  
  <entry>
    <title>基本Spring Boot 的 Spring Security CAS SSO 配置</title>
    <link href="/2017/02/18/spring-boot-security-cas-sso/"/>
    <id>/2017/02/18/spring-boot-security-cas-sso/</id>
    <published>2017-02-18T04:21:42.000Z</published>
    <updated>2017-03-08T16:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>【原创文章，转载请注明出处】</strong></p>
<blockquote>
<p>最近在整理公司的几个内部系统的认证和授权，这些子系统是用php开发的，单点登陆和权限管理都做了，但是架构和设计上有一些局限，导致本博用Java开发的新的子系统无法接入。随着公司技术方向往Java微服务架构转移，之前老的那一套php搞的认证与授权也决定推倒从来，用Java的这一套来搞。</p>
</blockquote>
<p>今天主要主要聊一下单点登陆系统的整合，单点登陆这种比较成熟的技术，有很多开源产品可以使用。而本博的原则也是能用开源产品就尽量不要自己重头写，原因很简单：</p>
<ul>
<li>开源产品在需求上考虑的比你要周全</li>
<li>公司自己不需要去维护一套代码，可以减少成本</li>
</ul>
<a id="more"></a>
<p>单点登录开源产品网上有很多，综合评估下来肯定使用<code>CAS</code>，因为他历史悠久、功能强大、坚持迭代更新中。本文不详情介绍如何搭建<code>CAS</code>单点登录服务了，因为网上已经有很多相关的博文了，本博在搭建<code>CAS</code>时大多参照了<code>Endzz</code>的<a href="http://www.jianshu.com/p/daca18a8f84c" target="_blank" rel="external">这篇博文</a>。</p>
<p>现在是<code>Spring Boot</code>的时代，本博在工作中开发的Web应该也都是基于<code>Spring Boot</code>构建的，因为她实在是太快捷太方便了！Web的授权访问控制使用<code>Spring Security</code>Spring家族的一员猛将，本篇博文主要聊一下如何基于<code>Spring Boot</code>把<code>Spring Security</code>与<code>CAS</code>单点登录整合起来，接下来进入正题。</p>
<p>首先给项目添加<code>Spring Security</code>依赖配置(本博使用<code>Gradle</code>构建):<br><figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">	compile(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</div><div class="line">	compile(<span class="string">'org.springframework.boot:spring-boot-starter-security'</span>)</div><div class="line">	compile(<span class="string">'org.springframework.security:spring-security-cas'</span>)</div><div class="line">	testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中spring-security-cas这个依赖很关键，她内部已经实现了整合逻辑，而我们要做的仅仅是配置。</p>
<p>然后添加Security配置文件:</p>
<figure class="highlight java"><figcaption><span>WebSecurityConfig.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Spring Security configs.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> marco</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableWebSecurity</span></div><div class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(jsr250Enabled = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// CAS单点登录服务地址</span></div><div class="line">    <span class="keyword">private</span> String SSO_URL = <span class="string">"http://sso.xxx.com"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Spring Security 基本配置</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> httpSecurity</div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        httpSecurity.exceptionHandling().accessDeniedPage(<span class="string">"/error/403"</span>) <span class="comment">// 无权访问时转向页面</span></div><div class="line">                .authenticationEntryPoint(getCasAuthenticationEntryPoint())</div><div class="line">                .and().addFilter(casAuthenticationFilter())</div><div class="line">                .addFilterBefore(singleSignOutFilter(), CasAuthenticationFilter.class)</div><div class="line">                .addFilterBefore(logoutFilter(), LogoutFilter.class)</div><div class="line">                .authorizeRequests()</div><div class="line">                .antMatchers(<span class="string">"/js/**"</span>, <span class="string">"/css/**"</span>, <span class="string">"/imgs/**"</span>).permitAll()</div><div class="line">                .anyRequest().authenticated()</div><div class="line">                .and()</div><div class="line">                .formLogin().loginPage(<span class="string">"/login"</span>).permitAll()</div><div class="line">                .and().logout().permitAll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 配置CAS登录页面</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> CasAuthenticationEntryPoint <span class="title">getCasAuthenticationEntryPoint</span><span class="params">()</span> </span>&#123;</div><div class="line">        CasAuthenticationEntryPoint point = <span class="keyword">new</span> CasAuthenticationEntryPoint();</div><div class="line">        point.setLoginUrl(SSO_URL + <span class="string">"login"</span>);</div><div class="line">        point.setServiceProperties(serviceProperties());</div><div class="line">        <span class="keyword">return</span> point;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 认证过滤器</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> CasAuthenticationFilter <span class="title">casAuthenticationFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        CasAuthenticationFilter filter = <span class="keyword">new</span> CasAuthenticationFilter();</div><div class="line">        filter.setAuthenticationManager(authenticationManager());</div><div class="line">        <span class="keyword">return</span> filter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SingleSignOutFilter <span class="title">singleSignOutFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        SingleSignOutFilter filter = <span class="keyword">new</span> SingleSignOutFilter();</div><div class="line">        filter.setCasServerUrlPrefix(SSO_URL);</div><div class="line">        filter.setIgnoreInitConfiguration(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> filter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> LogoutFilter <span class="title">logoutFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        LogoutFilter filter = <span class="keyword">new</span> LogoutFilter(SSO_URL + <span class="string">"logout"</span>, <span class="keyword">new</span> SecurityContextLogoutHandler());</div><div class="line">        <span class="keyword">return</span> filter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> CasAuthenticationProvider <span class="title">casAuthenticationProvider</span><span class="params">()</span> </span>&#123;</div><div class="line">        CasAuthenticationProvider provider = <span class="keyword">new</span> CasAuthenticationProvider();</div><div class="line">        provider.setTicketValidator(cas30ServiceTicketValidator());</div><div class="line">        provider.setServiceProperties(serviceProperties());</div><div class="line">        provider.setKey(<span class="string">"an_id_for_this_auth_provider_only"</span>);</div><div class="line">        provider.setAuthenticationUserDetailsService(userDetailsByNameServiceWrapper());</div><div class="line">        <span class="keyword">return</span> provider;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> ServiceProperties <span class="title">serviceProperties</span><span class="params">()</span> </span>&#123;</div><div class="line">        ServiceProperties properties = <span class="keyword">new</span> ServiceProperties();</div><div class="line">        properties.setService(<span class="string">"http://localhost:8080/login/cas"</span>);</div><div class="line">        properties.setSendRenew(<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> properties;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当CAS认证成功时, Spring Security会自动调用此类对用户进行授权</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> UserDetailsByNameServiceWrapper <span class="title">userDetailsByNameServiceWrapper</span><span class="params">()</span> </span>&#123;</div><div class="line">        UserDetailsByNameServiceWrapper wrapper = <span class="keyword">new</span> UserDetailsByNameServiceWrapper();</div><div class="line">        wrapper.setUserDetailsService(userDetailsService);</div><div class="line">        <span class="keyword">return</span> wrapper;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Cas20ServiceTicketValidator <span class="title">cas30ServiceTicketValidator</span><span class="params">()</span> </span>&#123;</div><div class="line">        Cas20ServiceTicketValidator validator = <span class="keyword">new</span> Cas20ServiceTicketValidator(SSO_URL);</div><div class="line">        <span class="keyword">return</span> validator;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p><code>UserDetailsService</code>是定义获取用户权限信息的接口，以下是<code>UserDetailsService</code>的实现类，这里应该去查询数据库或者调用授权API获取用户权限，本博这里简单做一下示例代码实现：</p>
<figure class="highlight java"><figcaption><span>UserDetailsServiceImpl</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"userDetailsService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</div><div class="line">        List&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        GrantedAuthority admin = <span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_ADMIN"</span>);</div><div class="line">        authorities.add(admin);</div><div class="line"></div><div class="line">        User marco = <span class="keyword">new</span> User(<span class="string">"Marco"</span>, <span class="string">"111111"</span>, authorities);</div><div class="line">        <span class="keyword">return</span> marco;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此<code>Spring Security CAS</code>已经配置完了，后续的HTML或者Controller中使用<code>Spring Security</code>标签或者<code>JSR250</code>标签即可对页面、restful API进去权限控制。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RolesAllowed</span>(<span class="string">"ROLE_ADMIN"</span>)</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>本篇博文代码地址：<a href="https://github.com/MTequila/demos/tree/master/spring-security-sso" target="_blank" rel="external">https://github.com/MTequila/demos/tree/master/spring-security-sso</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;【原创文章，转载请注明出处】&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最近在整理公司的几个内部系统的认证和授权，这些子系统是用php开发的，单点登陆和权限管理都做了，但是架构和设计上有一些局限，导致本博用Java开发的新的子系统无法接入。随着公司技术方向往Java微服务架构转移，之前老的那一套php搞的认证与授权也决定推倒从来，用Java的这一套来搞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天主要主要聊一下单点登陆系统的整合，单点登陆这种比较成熟的技术，有很多开源产品可以使用。而本博的原则也是能用开源产品就尽量不要自己重头写，原因很简单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开源产品在需求上考虑的比你要周全&lt;/li&gt;
&lt;li&gt;公司自己不需要去维护一套代码，可以减少成本&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="/categories/Spring-Boot/"/>
    
    
      <category term="Spring" scheme="/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="/tags/Spring-Boot/"/>
    
      <category term="Spring Security" scheme="/tags/Spring-Security/"/>
    
      <category term="CAS" scheme="/tags/CAS/"/>
    
      <category term="SSO" scheme="/tags/SSO/"/>
    
  </entry>
  
</feed>
